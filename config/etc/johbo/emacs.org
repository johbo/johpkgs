#+PROPERTY: header-args :tangle yes :results value silent

* TODO Original emacs.el - needs restructuring

#+BEGIN_SRC emacs-lisp
  ;; Common emacs configuration


  ;;; Code:

  ;; Set up the package repos for emacs
  (require 'package)
  (add-to-list 'package-archives
      '("marmalade" .
        "http://marmalade-repo.org/packages/"))
  ;; Integration for emacsPackagesNg
  (add-to-list 'package-directory-list "~/.nix-profile/share/emacs/site-lisp/elpa")
  (package-initialize)

  ;; Various configuration settings
  (custom-set-variables
    '(column-number-mode t)
    '(custom-enabled-themes (quote (tango-dark)))
    '(display-time-mode t)
    '(feature-indent-level 4)
    '(feature-indent-offset 4)
    '(fill-column 79)
    '(indent-tabs-mode nil)
    '(js2-mode-escape-quotes nil)
    '(js2-mode-indent-ignore-first-tab t)
    '(menu-bar-mode nil)
    '(po-auto-edit-with-msgid t)
    '(po-auto-replace-revision-date t)
    '(python-fill-docstring-style (quote django))
    '(safe-local-variable-values (quote ((encoding . utf-8))))
    '(scroll-bar-mode nil)
    '(show-paren-mode t)
    '(tool-bar-mode nil)
    '(tramp-default-method "ssh")
  )

  (setq font-lock-maximum-decoration t)
  (setq-default ispell-program-name "aspell")
  (setq ns-pop-up-frames nil)
  (setq search-highlight t)
  (setq x-select-enable-clipboard t)

  ;; Increase the threshold when GC will be initiated, suggested by flx
  (setq gc-cons-threshold 20000000)

#+END_SRC

* OS integration
** Nix integration

Nix will place things inside of =~/.nix-profile/share/emacs/site-lisp=.

Not yet sure how it works on NixOS, migth be that more paths have to be
included at this point to make system wide installs work.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.nix-profile/share/emacs/site-lisp")
#+END_SRC
** Emacs server

*** PID file hacks

Need a way to write out a PID file so that I can manage =emacs-server= with
=supervisord= both on Linux and MacOS.

#+BEGIN_SRC emacs-lisp
  ;; Write a PID file if we are a daemon, so that supervisord can manage us with
  ;; pidproxy
  (defun my/write-pid-file ()
    "Write the Emacs PID into a file"
    (let ((pid-file "~/var/run/emacs-server.pid")
          (pid (number-to-string (emacs-pid))))
      (with-temp-file pid-file (insert pid))))

  (if (daemonp)
      (my/write-pid-file))
#+END_SRC

* General

Misc things

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

Allow narrowing, it is very useful together with org mode.

#+BEGIN_SRC emacs-lisp
  (put 'narrow-to-region 'disabled nil)
#+END_SRC

** Direcotries

#+BEGIN_SRC emacs-lisp
  ;; YaSnippets
  (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
#+END_SRC

** IDO mode

#+BEGIN_SRC emacs-lisp
  ;; IDO mode
  (require 'ido)
  (require 'flx-ido)
  (ido-mode t)
  ;; TODO: find out what this does
  ;; (ido-everywhere t)
  (flx-ido-mode t)
  ;; disable ido faces to see flx highlights
  (setq ido-enable-flex-matching t)
  (setq ido-use-faces nil)
#+END_SRC

** Whitespace

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  ;;(setq-default show-trailing-whitespace t)
#+END_SRC
* Org mode configuration

** Directories

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (quote ("~/n" "~/n/hr")))
  (setq org-directory "~/n")
  (setq org-default-notes-file (concat org-directory "/capture.org"))
#+END_SRC

** Keys

#+BEGIN_SRC emacs-lisp
  ;; Org mode configuration
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC

*** TODO  Think of global support for links

Have to find out if I want these, so far they are not tangled.

#+BEGIN_SRC emacs-lisp :tangle no
  (global-set-key "\C-c L" 'org-insert-link-global)
  (global-set-key "\C-c o" 'org-open-at-point-global)
#+END_SRC
** Capturing

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
   '(("t" "Tasks" entry (file+headline (concat org-directory "/capture.org")
                                       "Refile Tasks")
      "* TODO %?\n  %i\n  %a")
     ("j" "Journal" entry (file+datetree (concat org-directory "/journal.org"))
      "* %?\nEntered on %U\n  %i\n  %a")
     ("f" "Feedback" entry (file+datetree (concat org-directory "/hr/feedback.org"))
      "* %?\nEntered on %U\n  %i\n  %a")
     ("d" "Daily" entry (file+headline (concat org-directory "/daily.org")
                                       "Since the last daily"))
     ))
#+END_SRC
** Agenda

#+BEGIN_SRC emacs-lisp
#+END_SRC

** Refiling configuration

Keep two levels and include all agenda files for refiling.

#+BEGIN_SRC emacs-lisp
  (setq org-refile-use-outline-path t)
  (setq org-outline-path-complete-in-steps t)
  (setq org-refile-allow-creating-parent-nodes nil)
  (setq org-refile-targets '((org-agenda-files . (:maxlevel . 2))))
#+END_SRC

** TODO refile targets

Definition is in "org-refile-targets".

** Babel

Activate a few more languages for code blocks, this allows for "literate
programming" or other things which might then be called "literate devops" or
"literate support".

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((dot . t)
     (emacs-lisp . t)
     (js . t)
     (python . t)
     (sh . t)
     (sql . t)))
#+END_SRC
* Programming

#+BEGIN_SRC emacs-lisp
  ;; Autocomplete mode
  (require 'auto-complete-config)
  (ac-config-default)

  ;; Projectile
  (require 'projectile)
  (projectile-global-mode)

  ;; Flycheck
  (require 'flycheck)
  (add-hook 'after-init-hook 'global-flycheck-mode)
  (setq flycheck-flake8rc "~/.nix-profile/etc/johbo/flake8rc")
#+END_SRC

** Web formats
#+BEGIN_SRC emacs-lisp
  ;; Register YAML mode
  (autoload 'yaml-mode "yaml-mode" "Major mode for editing YAML files." t)
  (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
#+END_SRC
* Programming in D

#+BEGIN_SRC emacs-lisp
  ;; Register D mode
  (autoload 'd-mode "d-mode" "Major mode for editing D source code." t)
  (push '("\\.d$" . d-mode) auto-mode-alist)
  ;; TODO: currently need this so that c-default-style is defined.
  (require 'cc-mode)
  (push '((d-mode . "stroustrup")) c-default-style)
#+END_SRC

* Programming in Python

#+BEGIN_SRC emacs-lisp
  ;; JEDI as completion plugin for Python
  (add-to-list 'ac-sources 'ac-source-jedi-direct)
  (setq jedi:complete-on-dot t)
  (add-hook 'python-mode-hook 'jedi:setup)
  (setq jedi:server-command '("jediepcserver"))
  ;; (setq jedi:server-args
  ;;       '("--log" "/tmp/jediepcserver.log"
  ;;         "--log-traceback"
  ;;         "--log-level" "DEBUG"))
#+END_SRC

* Programming in Nix

#+BEGIN_SRC emacs-lisp
  ;; Register nix mode
  (autoload 'nix-mode "nix-mode" "Major mode for editing Nix expressions." t)
  (push '("\\.nix\\'" . nix-mode) auto-mode-alist)
  (push '("\\.nix.in\\'" . nix-mode) auto-mode-alist)
#+END_SRC
* Version control

** Git

#+BEGIN_SRC emacs-lisp
  (require 'magit)
#+END_SRC

** Mercurial

#+BEGIN_SRC emacs-lisp
  (require 'monky)
#+END_SRC
